name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libegl1 \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxcb-cursor0 \
          libgl1-mesa-dri \
          libglib2.0-0 \
          xvfb

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff

    - name: Lint with Ruff
      run: |
        # Check for syntax errors and undefined names
        ruff check src/ --select=E9,F63,F7,F82
        # Run full linting (exit-zero treats all errors as warnings)
        ruff check src/ --exit-zero

    - name: Format check with Ruff
      run: |
        ruff format --check src/

    - name: Test import structure
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); from src.utils.config import LANGUAGES; print('Config import successful')"
        python -c "import sys; sys.path.insert(0, 'src'); from src.backend.translation_backend import TranslationManager; print('Backend import successful')"

    - name: Test application startup (headless)
      run: |
        python -c "
        import sys, os
        sys.path.insert(0, 'src')
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'
        from src.gui.translator_app import QApplication, TranslatorApp
        app = QApplication([])
        print('QApplication created successfully')

        # Test main application window creation
        main_window = TranslatorApp()
        print('TranslatorApp window created successfully')

        # Test basic functionality
        assert hasattr(main_window, 'translation_manager')
        assert hasattr(main_window, 'source_combo')
        assert hasattr(main_window, 'target_combo')
        print('Main window components verified')

        # Test window can be shown (but not actually shown in headless)
        main_window.show()
        print('Window show() method works')

        # Clean up
        main_window.close()
        app.quit()
        print('Application startup test completed successfully')
        "

    - name: Test main.py execution (headless)
      run: |
        python -c "
        import sys, os
        sys.path.insert(0, '.')
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'

        # Test that main.py can be imported and executed
        import main
        print('main.py import successful')

        # Test main function exists
        assert hasattr(main, 'main'), 'main() function not found'
        print('main() function found')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-executable:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name SeedX-Translator main.py

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: SeedX-Translator-${{ matrix.os }}
        path: dist/

  release:
    needs: [test, build-executable]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release assets
      run: |
        mkdir release-assets
        cp -r SeedX-Translator-*/* release-assets/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
