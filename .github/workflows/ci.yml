name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff

    - name: Lint with Ruff
      run: |
        # Check for syntax errors and undefined names
        ruff check src/ --select=E9,F63,F7,F82
        # Run full linting (exit-zero treats all errors as warnings)
        ruff check src/ --exit-zero

    - name: Format check with Ruff
      run: |
        ruff format --check src/

    - name: Test import structure
      run: |
        python -c "import sys; sys.path.insert(0, 'src'); from src.utils.config import LANGUAGES; print('Config import successful')"
        python -c "import sys; sys.path.insert(0, 'src'); from src.backend.translation_backend import TranslationManager; print('Backend import successful')"

    - name: Test application startup (headless)
      run: |
        python -c "
        import sys, os
        sys.path.insert(0, 'src')
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'
        from src.gui.translator_app import QApplication
        app = QApplication([])
        print('GUI components import successful')
        "
      if: runner.os != 'macOS'  # Skip on macOS due to Qt issues in CI

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-executable:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name SeedX-Translator main.py

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: SeedX-Translator-${{ matrix.os }}
        path: dist/

  release:
    needs: [test, build-executable]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release assets
      run: |
        mkdir release-assets
        cp -r SeedX-Translator-*/* release-assets/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
